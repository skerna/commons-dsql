buildscript {
    ext.projectVersion = version
    ext.projectName = 'sql4k'
    ext.projectGroup = 'io.r2b.sql4k'
    ext.projectDesc = 'SQL4K : Portable DSL sql'
    ext.projectHost = 'gitlab'
    ext.projectOrg = 'sql4k'
    ext.projectLicense = 'MIT'
    ext.projectDevelNick = 'R2B'
    ext.projectDevelName = 'Modificado por R2B'
    ext.projectInceptionYear = 2018
    ext.kotlin_version = '1.3.0'
    ext.jfrog_version = '4.7.4'
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:$jfrog_version"
    }
}

apply plugin: 'kotlin-platform-common'

/* Make a list of submodules organized by platform. */
def fmtMods = { mods -> mods.collect { it.toString().substring(8) }.join(', ') }
project.ext {
    common_submods = subprojects.findAll {
        !it.name.endsWith('jvm') && !it.name.endsWith('js') // && !it.name.endsWith('-native')
    }
    println("common submodules ${fmtMods(common_submods)}")
    jvm_submods = subprojects.findAll {
        it.name.endsWith('jvm')
    }
    println("JVM submodules: ${fmtMods(jvm_submods)}")
    js_submods = subprojects.findAll {
        it.name.endsWith('js')
    }
    println("javascript submodules: ${fmtMods(js_submods)}")
}

/* All the common subprojects (including this top-level one), but no platform projects. */
configure(common_submods) {
    apply plugin: 'kotlin-platform-common'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
    }
}

/* All JVM platform subprojects. */
configure(jvm_submods) {

    apply plugin: 'kotlin-platform-jvm'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        testCompile "junit:junit:4.12"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }
}

allprojects {
    group projectGroup
    version projectVersion
    apply from: "$rootProject.projectDir/gradle/publish.gradle"

    repositories {
        jcenter()
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "${artifactory_contextUrl}/libs-snapshot-local"
            credentials {
                username "${artifactory_user}"
                password "${artifactory_password}"
            }
        }
    }
}


/* All javascript platform subprojects. */
configure(js_submods) {
    apply plugin: 'kotlin-platform-js'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    }

    compileKotlin2Js {
        kotlinOptions {
            outputFile = "${project.buildDir.path}/js/${project.name}.js"
            moduleKind = "umd"
            sourceMap = true
            metaInfo = true
        }
    }
}


ext.compileModularSources = { Project project, String moduleName, Collection<FileCollection> moduleOutputs = [project.sourceSets.main.output] ->
    // module-info.java should be in java9 source set by convention
    SourceDirectorySet java9SourceSet = project.sourceSets.module.java
    project.tasks.getByName("compileModuleJava").configure { JavaCompile it ->
        dependsOn(moduleOutputs)
        it.sourceCompatibility = 1.9
        it.targetCompatibility = 1.9
        it.options.fork = true
        it.options.forkOptions.javaHome = file("/usr/lib/jvm/java-11-openjdk")
        it.options.sourcepath = files(java9SourceSet.srcDirs)

        doFirst {
            def moduleFiles = files(*moduleOutputs)
            def modulePath = project.configurations.compileClasspath.filter { !(it in moduleFiles.files) }

            options.compilerArgs = [
                '--module-path', modulePath.asPath,
                '--patch-module', "$moduleName=${moduleFiles.asPath}"
            ]

            classpath = files()
        }
    }
}

ext.manifestAttributes = { Manifest manifest, Project project, String component = null, boolean multiRelease = false ->
    project.configure(manifest) {
        attributes(
            'Implementation-Vendor': 'R2B',
            //'Implementation-Title': project.archivesBaseName,
            //'Implementation-Version': project.buildNumber
        )


        if (component != null) {
            attributes(
                'Kotlin-Runtime-Component': component,
                //'Kotlin-Version': project.kotlinLanguageVersion
            )
        }
        if (multiRelease) {
            attributes(
                'Multi-Release': 'true'
            )
        }
    }
}


ext.configureKotlinProject = { Project project ->
    ext.artifactos = []

    project.configure(project) {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.kotlin
        }

        artifactos.add(sourcesJar)

    }
}
